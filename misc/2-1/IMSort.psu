MERGE(A, p, q, r)
nl = q - p + 1
nr = r - q
let L[0:nl-1] and R[0:nr-1] be new arrays
for i = 0 to nl
    L[i] = A[p+i]
for j = 0 to nr
    R[j] = A[q+1+j]

i = 0
j = 0
k = p
// start merging the L and R arrays into the original place in A array in sorted order
while i < nl and j < nr
    if L[i] < R[j]
        A[k] = L[i]
        i = i + 1
    else
        A[k] = R[j]
        j = j + 1
    k = k + 1

while i < nl
    A[k] = L[i]
    i = i + 1
    k = k + 1
while j < nr
    A[k] = R[j]
    j = j + 1
    k = k + 1

INSERTION-SORT(A, p, q)
// loop invariant: elements in A[1:i] before the start of next loop are the same as in A[1:i] before the start of current loop but in sorted order
for i = p+1 to q
    key = A[i]
    j = i - 1
    while j >= p and A[j] > key
        A[j+1] = A[j]
        j = j - 1
    A[j + 1] = key

MERGE-SORT(A, p, r, k)
if r - p <= k
    INSERTION-SORT(A, p, r)
    return
q = (p + r) / 2
MERGE-SORT(A, p, q)
MERGE-SORT(A, q+1, r)
MERGE(A, p, q, r)